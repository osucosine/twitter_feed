<?php

/**
 * @file
 * Twitter module hooks.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_theme().
 */
function twitter_feed_theme($existing, $type, $theme, $path) {
  return [
    'twitter_feed' => [
      'template' => 'twitter-feed',
      'variables' => ['items' => NULL],
    ],
    'twitter_feed_item' => [
      'template' => 'twitter-feed-item',
      'variables' => ['tweet' => NULL],
    ],
  ];
}

/* DISABLED due to phpstan errors, deprecated in D8 */
/* Requirements declared as dependency in twitter_feed.info.yml */
/* https://www.drupal.org/node/2170763 */

/**
 * Implements hook_libraries_info().
 */
/*
* function twitter_feed_libraries_info() {
*  $libraries['timeago'] = [
*    'name' => 'TimeAgo',
*    'vendor url' => 'http://timeago.yarp.com',
*    'download url' => 'https://github.com/rmm5t/jquery-timeago/zipball/v1.5.2',
*    'version arguments' => [
*      'file' => 'jquery.timeago.js',
*      // @version 1.5.2
*      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
*      'lines' => 10,
*    ],
*    'files' => [
*      'js' => [
*        'jquery.timeago.js',
*      ],
*    ],
*  ];
*
*  return $libraries;
*}
*/

/* DISABLED due to phpstan errors, deprecated in D8 */
/* Requirements declared as dependency in twitter_feed.info.yml */
/* https://www.drupal.org/node/2170763 */

/**
 * Implements hook_library_info_build().
 *
 * We also define Timeago through the core library callbacks.
 */
/*
*function twitter_feed_library_info_build() {
*  $lib = twitter_feed_libraries_info();
*  $libraries = [];
*
*  if (!function_exists('libraries_get_path')) {
*    return NULL;
*  }
*
*  $library_path = libraries_get_path('timeago');
*  if (strpos($library_path, '/') !== 0) {
*    $library_path = '/' . $library_path;
*  }
*
*  $libraries['timeago'] = [
*    'title' => $lib['timeago']['name'],
*    'remote' => $lib['timeago']['vendor url'],
*    'version' => '1.5.2',
*    'license' => [
*      'name' => 'MIT',
*      'url' => 'https://github.com/rmm5t/jquery-timeago/raw/master/LICENSE.txt',
*      'gpl-compatible' => TRUE,
*    ],
*    'dependencies' => [
*      'core/jquery',
*    ],
*    'js' => [
*      $library_path . '/jquery.timeago.js' => [
*        'scope' => 'footer',
*      ],
*    ],
*  ];
*
*  $languages = twitter_feed_timeago_languages();
*  foreach ($languages as $language_name) {
*    $libraries['timeago_' . $language_name] = [
*      'title' => $lib['timeago']['name'],
*      'remote' => $lib['timeago']['vendor url'],
*      'version' => '1.5.2',
*      'license' => [
*        'name' => 'MIT',
*        'url' => 'https://github.com/rmm5t/jquery-timeago/raw/master/LICENSE.txt',
*        'gpl-compatible' => TRUE,
*      ],
*      'dependencies' => [
*        'core/jquery',
*      ],
*      'js' => [
*        $library_path . '/locales/jquery.timeago.' . $language_name . '.js' => [
*          'scope' => 'footer',
*        ],
*      ],
*    ];
*  }
*
*  return $libraries;
*}
*/

/* DISABLED due to phpstan errors, deprecated in D8 */
/* Requirements declared as dependency in twitter_feed.info.yml */
/* https://www.drupal.org/node/2170763 */

/**
 * Get timeago languages.
 *
 * @return array
 *   The sorted timeago languages.
 */
/*
*function twitter_feed_timeago_languages() {
*  if (!function_exists('libraries_get_path')) {
*    return [];
*  }
*
*  $path = libraries_get_path('timeago');
*  $files = file_scan_directory("$path/locales", '/timeago\..{2,14}\.js$/i', ['recurse' => FALSE, 'key' => 'name']);
*  $timeago_locales = [];
*
*  if ($files) {
*    foreach ($files as $name => $file) {
*      preg_match('/timeago\.(.{2,14})$/i', $name, $matches);
*      if ($matches[1]) {
*        $timeago_locales[$matches[1]] = $matches[1];
*      }
*    }
*  }
*  ksort($timeago_locales);
*
*  return $timeago_locales;
*}
*/

/**
 * Implements hook_preprocess_twitter_feed_item().
 */
function template_preprocess_twitter_feed_item(&$vars) {

  $config = \Drupal::config('twitter_feed.settings');
  $block_config = \Drupal::config('block.block.twitterfeedblock');
  $tweet = $vars['tweet'];

  $vars['tweet_url'] = 'https://twitter.com/'. $tweet->user->screen_name . '/status/'. $tweet->id;

  // Save the raw version of the text, key depends on tweet_mode
  $vars['text_raw'] = ['#markup' => ( $block_config->get('settings.tweet_mode') ? $tweet->full_text : $tweet->text)];

  // Creates a fake input_format so we can use some internal Drupal filters.
  $fake_filter = new stdClass();
  $fake_filter->settings = ['filter_url_length' => 72];

  // Converts URLs to links and line-breaks to paragraphs.
  // TODO hashtags and usernames.
  $text = _filter_url($vars['text_raw']['#markup'], $fake_filter);

  if ($block_config->get('settings.strip_anchors')) {
    $text = twitter_feed_strip_tags_content($text);
  }
  $vars['text'] = ['#markup' => $text];

  // This is the datestamp that jQuery timeago expects.
  $vars['date']['stamp'] = date('c', strtotime($tweet->created_at));
  $vars['date']['clean'] = \Drupal::service('date.formatter')->format(strtotime($tweet->created_at), 'short');
}

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function twitter_feed_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.twitter_feed':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Helper function to strip html tags and their contents
 * https://www.php.net/manual/en/function.strip-tags.php#86964
 *
 * @param text
 *   String to parse
 * @param tags
 *   Tags to preserve
 * @param invert
 *    Invert the operation, save all tags but those provided
 * @return string
 *   The stripped string
 */
function twitter_feed_strip_tags_content($text, $tags = '', $invert = FALSE) {

  preg_match_all('/<(.+?)[\s]*\/?[\s]*>/si', trim($tags), $tags);
  $tags = array_unique($tags[1]);

  if(is_array($tags) AND count($tags) > 0) {
    if($invert == FALSE) {
      return preg_replace('@<(?!(?:'. implode('|', $tags) .')\b)(\w+)\b.*?>.*?</\1>@si', '', $text);
    }
    else {
      return preg_replace('@<('. implode('|', $tags) .')\b.*?>.*?</\1>@si', '', $text);
    }
  }
  elseif($invert == FALSE) {
    return preg_replace('@<(\w+)\b.*?>.*?</\1>@si', '', $text);
  }
  return $text;
}
