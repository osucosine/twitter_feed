diff --git a/src/Plugin/Block/TwitterFeedBlock.php b/src/Plugin/Block/TwitterFeedBlock.php
index 78d4ece..16da782 100644
--- a/src/Plugin/Block/TwitterFeedBlock.php
+++ b/src/Plugin/Block/TwitterFeedBlock.php
@@ -64,11 +64,15 @@ class TwitterFeedBlock extends BlockBase implements ContainerFactoryPluginInterf
   public function defaultConfiguration() {
     $default = [
       'number_of_tweets' => 3,
+      'display_number_of_tweets' => 3,
+      'tweet_mode', FALSE,
       'username' => 'drupal',
       'display_images' => FALSE,
       'display_avatars' => FALSE,
       'display_retweets' => TRUE,
       'exclude_replies' => FALSE,
+      'strip_anchors' => FALSE,
+      'block_cache_time' => 3600,
     ];
     return $default;
   }
@@ -79,10 +83,22 @@ class TwitterFeedBlock extends BlockBase implements ContainerFactoryPluginInterf
   public function blockForm($form, FormStateInterface $form_state) {
     $form['number_of_tweets'] = [
       '#type' => 'number',
-      '#title' => $this->t('Number of tweets'),
-      '#description' => $this->t('Fetch and display only this number of feeds'),
+      '#title' => $this->t('Fetch Number of tweets'),
+      '#description' => $this->t('Fetch this number of tweets (includes deleted, reweets, and replies in this count)'),
       '#default_value' => $this->configuration['number_of_tweets'],
     ];
+    $form['display_number_of_tweets'] = [
+      '#type' => 'number',
+      '#title' => $this->t('Display number of tweets'),
+      '#description' => $this->t('Display only this number of tweets'),
+      '#default_value' => $this->configuration['display_number_of_tweets'],
+    ];
+    $form['tweet_mode'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Use extended tweet mode'),
+      '#description' => $this->t('Extended mode is required to fetch tweets up to 280 characters'),
+      '#default_value' => $this->configuration['tweet_mode'],
+    ];
     $form['username'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Username to display'),
@@ -104,15 +120,27 @@ class TwitterFeedBlock extends BlockBase implements ContainerFactoryPluginInterf
     $form['display_retweets'] = array(
       '#type' => 'checkbox',
       '#title' => $this->t('Display retweets'),
-      '#description' => $this->t("If retweets should be displayed (number of tweets displayed may be affected if disabled)"),
+      '#description' => $this->t("If retweets should be displayed (number of tweets displayed may be affected if disabled). If a fixed number of tweets are required, fetch more than needed and display a fixed number."),
       '#default_value' => $this->configuration['display_retweets'],
     );
     $form['exclude_replies'] = array(
       '#type' => 'checkbox',
       '#title' => $this->t('Exclude replies'),
-      '#description' => $this->t("If replies should be Excluded (number of tweets displayed may be affected if enabled)"),
+      '#description' => $this->t("If replies should be excluded (number of tweets displayed may be affected if enabled). If a fixed number of tweets are required, fetch more than needed and display a fixed number."),
       '#default_value' => $this->configuration['exclude_replies'],
     );
+    $form['strip_anchors'] = array(
+      '#type' => 'checkbox',
+      '#title' => $this->t('Strip anchors'),
+      '#description' => $this->t("Strip anchor tags out of tweets and trailing link to any linked resources"),
+      '#default_value' => $this->configuration['strip_anchors'],
+    );
+    $form['block_cache_time'] = array(
+      '#type' => 'number',
+      '#title' => $this->t('Cache time'),
+      '#description' => $this->t("Number of seconds to cache this block"),
+      '#default_value' => $this->configuration['block_cache_time'],
+    );
 
     return $form;
   }
@@ -122,11 +150,15 @@ class TwitterFeedBlock extends BlockBase implements ContainerFactoryPluginInterf
    */
   public function blockSubmit($form, FormStateInterface $form_state) {
     $this->configuration['number_of_tweets'] = $form_state->getValue('number_of_tweets');
+    $this->configuration['display_number_of_tweets'] = $form_state->getValue('display_number_of_tweets');
+    $this->configuration['tweet_mode'] = $form_state->getValue('tweet_mode');
     $this->configuration['username'] = $form_state->getValue('username');
     $this->configuration['display_images'] = $form_state->getValue('display_images');
     $this->configuration['display_avatars'] = $form_state->getValue('display_avatars');
     $this->configuration['display_retweets'] = $form_state->getValue('display_retweets');
     $this->configuration['exclude_replies'] = $form_state->getValue('exclude_replies');
+    $this->configuration['strip_anchors'] = $form_state->getValue('strip_anchors');
+    $this->configuration['block_cache_time'] = $form_state->getValue('block_cache_time');
   }
 
   /**
@@ -165,18 +197,15 @@ class TwitterFeedBlock extends BlockBase implements ContainerFactoryPluginInterf
 
       // Now get the tweets.
       // https://dev.twitter.com/rest/reference/get/statuses/user_timeline
-      $username = $this->configuration['username'];
-      $num_tweets = $this->configuration['number_of_tweets'];
-      $display_retweets = $this->configuration['display_retweets'];
-      $exclude_replies = $this->configuration['exclude_replies'];
       $options['headers']['Authorization'] = "{$body->token_type} $access_token";
       unset($options['headers']['Content-Length']);
       unset($options['form_params']);
       $query = http_build_query([
-        'screen_name' => $username,
-        'count' => $num_tweets,
-        'include_rts' => $display_retweets,
-        'exclude_replies' => $exclude_replies,
+        'screen_name' => $this->configuration['username'],
+        'count' => $this->configuration['number_of_tweets'],
+        'include_rts' => $this->configuration['display_retweets'],
+        'exclude_replies' => $this->configuration['exclude_replies'],
+        'tweet_mode' => ( $this->configuration['tweet_mode'] ? 'extended' : 'compatibility' ),
       ]);
       // Fetches the tweets.
       $res = $this->httpClient->get("https://api.twitter.com/1.1/statuses/user_timeline.json?$query", $options);
@@ -201,17 +230,19 @@ class TwitterFeedBlock extends BlockBase implements ContainerFactoryPluginInterf
     if (empty($renderable_tweets)) {
       return ['#markup' => $this->t('Error fetching or rendering tweets.')];
     }
-    $item_list = [
+    if ($this->configuration['display_number_of_tweets'] < count($renderable_tweets) &&
+        $this->configuration['display_number_of_tweets'] < $this->configuration['number_of_tweets']) {
+      $renderable_tweets = array_slice($renderable_tweets, 0, $this->configuration['display_number_of_tweets']);
+    }
+
+    $build['twitter_feed_items'] = [
+      '#theme' => 'twitter_feed',
       '#items' => $renderable_tweets,
-      '#type' => 'ul',
-      '#theme' => 'item_list',
-      '#attributes' => ['class' => 'twitter-feed'],
     ];
-    $build['twitter_feed_list'] = $item_list;
-    $build['#cache']['keys'] = ['twitter_feed', $username, "count:$num_tweets"];
-    // Cache block for 1 hour by default.
-    // TODO set per-block cache time.
-    $build['#cache']['max-age'] = 3600;
+
+    // Cache block
+    $build['#cache']['keys'] = ['twitter_feed', $this->configuration['username'], "count:$this->configuration['number_of_tweets']"];
+    $build['#cache']['max-age'] = $this->configuration['block_cache_time'];
 
     return $build;
   }
diff --git a/templates/twitter-feed-item.html.twig b/templates/twitter-feed-item.html.twig
index a8e83d2..8fe0de8 100755
--- a/templates/twitter-feed-item.html.twig
+++ b/templates/twitter-feed-item.html.twig
@@ -1,2 +1,16 @@
-<div class="tweet">{{ text }}</div>
-<time class="timeago" datetime="{{ date.stamp }}">{{ date.clean }}</time>
+{#
+/**
+ * @file
+ * Twitter_feed wrapper
+ *
+ * Available variables:
+ * - text: The parsed tweet
+ * - text_raw: The raw text
+ * - tweet_url: the direct link to the tweet
+ * - date: the date of the tweet
+ *   - stamp: timestamp of tweet
+ *   - clean: parsed version of time
+ */
+#}
+<div class="twitter_feed__item">{{ text }}</div>
+<time class="twitter_feed__timeago" datetime="{{ date.stamp }}">{{ date.clean }}</time>
diff --git a/templates/twitter-feed.html.twig b/templates/twitter-feed.html.twig
new file mode 100644
index 0000000..9f8a2f5
--- /dev/null
+++ b/templates/twitter-feed.html.twig
@@ -0,0 +1,15 @@
+{#
+/**
+ * @file
+ * twitter_feed wrapper
+ *
+ * Available variables:
+ * - items: The array of tweets that were fetched
+ */
+#}
+
+<div class="twitter_feed__wrapper">
+{% for item in items %}
+ {{ item }}
+{% endfor %}
+</div>
diff --git a/twitter_feed.module b/twitter_feed.module
index e628730..158a3ae 100755
--- a/twitter_feed.module
+++ b/twitter_feed.module
@@ -12,6 +12,10 @@ use Drupal\Core\Routing\RouteMatchInterface;
  */
 function twitter_feed_theme($existing, $type, $theme, $path) {
   return [
+    'twitter_feed' => [
+      'template' => 'twitter-feed',
+      'variables' => ['items' => NULL],
+    ],
     'twitter_feed_item' => [
       'template' => 'twitter-feed-item',
       'variables' => ['tweet' => NULL],
@@ -137,13 +141,29 @@ function twitter_feed_timeago_languages() {
  * Implements hook_preprocess_twitter_feed_item().
  */
 function template_preprocess_twitter_feed_item(&$vars) {
+
+  $config = \Drupal::config('twitter_feed.settings');
+  $block_config = \Drupal::config('block.block.twitterfeedblock');
   $tweet = $vars['tweet'];
+
+  $vars['tweet_url'] = 'https://twitter.com/'. $tweet->user->screen_name . '/status/'. $tweet->id;
+
+  // Save the raw version of the text, key depends on tweet_mode
+  $vars['text_raw'] = ['#markup' => ( $block_config->get('settings.tweet_mode') ? $tweet->full_text : $tweet->text)];
+
   // Creates a fake input_format so we can use some internal Drupal filters.
   $fake_filter = new stdClass();
   $fake_filter->settings = ['filter_url_length' => 72];
+
   // Converts URLs to links and line-breaks to paragraphs.
   // TODO hashtags and usernames.
-  $vars['text'] = ['#markup' => _filter_autop(_filter_url($tweet->text, $fake_filter))];
+  $text = _filter_url($vars['text_raw']['#markup'], $fake_filter);
+
+  if ($block_config->get('settings.strip_anchors')) {
+    $text = twitter_feed_strip_tags_content($text);
+  }
+  $vars['text'] = ['#markup' => $text];
+
   // This is the datestamp that jQuery timeago expects.
   $vars['date']['stamp'] = date('c', strtotime($tweet->created_at));
   $vars['date']['clean'] = \Drupal::service('date.formatter')->format(strtotime($tweet->created_at), 'short');
@@ -172,3 +192,35 @@ function twitter_feed_help($route_name, RouteMatchInterface $route_match) {
   }
   return NULL;
 }
+
+/**
+ * Helper function to strip html tags and their contents
+ * https://www.php.net/manual/en/function.strip-tags.php#86964
+ *
+ * @param text
+ *   String to parse
+ * @param tags
+ *   Tags to preserve
+ * @param invert
+ *    Invert the operation, save all tags but those provided
+ * @return string
+ *   The stripped string
+ */
+function twitter_feed_strip_tags_content($text, $tags = '', $invert = FALSE) {
+
+  preg_match_all('/<(.+?)[\s]*\/?[\s]*>/si', trim($tags), $tags);
+  $tags = array_unique($tags[1]);
+
+  if(is_array($tags) AND count($tags) > 0) {
+    if($invert == FALSE) {
+      return preg_replace('@<(?!(?:'. implode('|', $tags) .')\b)(\w+)\b.*?>.*?</\1>@si', '', $text);
+    }
+    else {
+      return preg_replace('@<('. implode('|', $tags) .')\b.*?>.*?</\1>@si', '', $text);
+    }
+  }
+  elseif($invert == FALSE) {
+    return preg_replace('@<(\w+)\b.*?>.*?</\1>@si', '', $text);
+  }
+  return $text;
+}
